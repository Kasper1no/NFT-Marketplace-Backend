generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  walletAddress String @unique
  nickname      String @unique
  email         String @unique
  avatar        String @default("https://res.cloudinary.com/dnkulgobc/image/upload/v1739471803/default_avatar_qh3umt.jpg")
  banner        String @default("https://res.cloudinary.com/dnkulgobc/image/upload/v1739471803/default_banner_pxjfac.jpg")
  balance       Float  @default(100)

  itemSoldNotification           Boolean @default(true)
  offerActivityNotification      Boolean @default(true)
  bestOfferActivityNotification  Boolean @default(true)
  successfulTransferNotification Boolean @default(true)
  transferNotification           Boolean @default(true)
  outbidNotification             Boolean @default(true)
  successfulPurchaseNotification Boolean @default(true)
  successfulMintNotification     Boolean @default(true)

  collections   Collection[]
  refreshTokens RefreshToken[]

  nftsOwned             NFT[]           @relation("OwnerRelation")
  nftsCreated           NFT[]           @relation("CreatorRelation")
  transactionsAsBuyer   Transaction[]   @relation("BuyerRelation")
  transactionsAsSeller  Transaction[]   @relation("SellerRelation")
  listings              NFTListing[]
  friendships1          Friendship[]    @relation("UserFriend1")
  friendships2          Friendship[]    @relation("UserFriend2")
  friendRequestSender   FriendRequest[] @relation("SenderRelation")
  friendRequestReciever FriendRequest[] @relation("ReceiverRelation")
  tradeOfferer          Trade[]         @relation("TradeOfferer")
  tradeTaker            Trade[]         @relation("TradeTaker")
  notifications         Notification[]

  @@map("users")
}

model NFT {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  tokenId       String?
  collectionId  String   @db.ObjectId
  ownerWallet   String
  creatorWallet String
  name          String
  URL           String
  price         Float
  image         String
  metadataURI   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  collection Collection   @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  owner      User         @relation("OwnerRelation", fields: [ownerWallet], references: [walletAddress], onDelete: Cascade)
  creator    User         @relation("CreatorRelation", fields: [creatorWallet], references: [walletAddress], onDelete: Cascade)
  listings   NFTListing[]
  TradeItem  TradeItem[]

  @@unique([tokenId, collectionId])
  @@map("nfts")
}

model Collection {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  contractAddress String     @unique
  name            String
  symbol          String
  image           String
  metadata        String
  royalties       Float      @default(0)
  blockchain      Blockchain
  creatorWallet   String
  creator         User       @relation(fields: [creatorWallet], references: [walletAddress], onDelete: Cascade)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  twitterLink   String?
  discordLink   String?
  facebookLink  String?
  instagramLink String?
  telegramLink  String?

  nfts             NFT[]
  collectionBlocks CollectionBlock[]

  @@map("collections")
}

enum Blockchain {
  ARBITRUM
  AVALANCHE
  BASE
  BLAST
  ETHEREUM
  POLYGON
  SEI
  ZORA
}

model CollectionBlock {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  collectionId String     @db.ObjectId
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  imageUrl     String

  @@map("collection_blocks")
}

model RefreshToken {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  walletAddress String   @unique
  tokenId       String   @unique
  createdAt     DateTime @default(now())
  expiresAt     DateTime

  user User @relation(fields: [walletAddress], references: [walletAddress], onDelete: Cascade)

  @@map("refresh_tokens")
}

// model Nonce {
//   id            String   @id @default(auto()) @map("_id") @db.ObjectId
//   walletAddress String   @unique
//   nonce         String
//   createdAt     DateTime @default(now())

//   user User @relation(fields: [walletAddress], references: [walletAddress], onDelete: Cascade)

//   @@index([createdAt])
//   @@map("nonces")
// }

model Transaction {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  buyerWallet     String
  sellerWallet    String
  listingId       String            @db.ObjectId
  price           Float
  network         String
  createdAt       DateTime          @default(now())
  status          TransactionStatus

  buyer   User       @relation("BuyerRelation", fields: [buyerWallet], references: [walletAddress])
  seller  User       @relation("SellerRelation", fields: [sellerWallet], references: [walletAddress])
  listing NFTListing @relation(fields: [listingId], references: [id])

  @@map("transactions")
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model NFTListing {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  nftId         String        @db.ObjectId
  sellerWallet  String
  price         Float
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  contractAddr  String
  transactionId String?
  dropAt        DateTime?
  status        ListingStatus @default(ACTIVE)

  nft    NFT  @relation(fields: [nftId], references: [id])
  seller User @relation(fields: [sellerWallet], references: [walletAddress])

  transactions Transaction[]
  bids         Bid[]         @relation(name: "BidsHistoryRelation")

  @@map("nft_listing")
}

enum ListingStatus {
  SCHEDULED
  ACTIVE
  SOLD
  CANCELLED
}

model Bid {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  listingId    String    @db.ObjectId
  bidderWallet String
  price        Float
  status       BidStatus @default(ACTIVE)
  createdAt    DateTime  @default(now())

  listing NFTListing @relation(fields: [listingId], references: [id], name: "BidsHistoryRelation")

  @@map("bids")
}

enum BidStatus {
  ACTIVE
  ACCEPTED
  REJECTED
}

model Friendship {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user1Wallet String
  user2Wallet String
  createdAt   DateTime @default(now())

  user1 User @relation("UserFriend1", fields: [user1Wallet], references: [walletAddress])
  user2 User @relation("UserFriend2", fields: [user2Wallet], references: [walletAddress])

  @@unique([user1Wallet, user2Wallet])
  @@map("friendships")
}

model FriendRequest {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  senderWallet   String
  receiverWallet String
  status         RequestStatus @default(PENDING)
  createdAt      DateTime      @default(now())

  sender   User @relation("SenderRelation", fields: [senderWallet], references: [walletAddress])
  receiver User @relation("ReceiverRelation", fields: [receiverWallet], references: [walletAddress])

  @@unique([senderWallet, receiverWallet])
  @@map("friend_requests")
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Trade {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  offererWallet String
  takerWallet   String
  status        TradeStatus @default(PENDING)
  offerTime     DateTime    @default(now())
  exchangeTime  DateTime?

  offerer    User        @relation("TradeOfferer", fields: [offererWallet], references: [walletAddress])
  taker      User        @relation("TradeTaker", fields: [takerWallet], references: [walletAddress])
  tradeItems TradeItem[]

  @@map("trades")
}

enum TradeStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model TradeItem {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  tradeId String    @db.ObjectId
  nftId   String    @db.ObjectId
  side    TradeSide
  trade   Trade     @relation(fields: [tradeId], references: [id])
  nft     NFT       @relation(fields: [nftId], references: [id])

  @@map("trade_items")
}

enum TradeSide {
  OFFER
  RECEIVER
}

model Notification {
  id          String                  @id @default(auto()) @map("_id") @db.ObjectId
  userWallet  String
  title       String
  message     String
  type        NotificationType
  webStatus   WebNotificationStatus   @default(SENT)
  emailStatus EmailNotificationStatus @default(UNSENT)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt

  user User @relation(fields: [userWallet], references: [walletAddress])
}

enum NotificationType {
  MINT
  OFFER
  BESTOFFER
  SUCCESSTRANSFER
  TRANSFER
  OUTBID
  PURCHASE
}

enum WebNotificationStatus {
  SENT
  FAILED
  READ
}

enum EmailNotificationStatus {
  SENT
  UNSENT
  FAILED
}
